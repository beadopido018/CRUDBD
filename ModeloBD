import java.util.Iterator;
import java.util.ArrayList;
import java.sql.*;

public class ModeloDB extends ModeloAbs
{
    // instance variables - replace the example below with your own
   private Connection conexion = null;
    private Statement stmt = null;
        private String servidor = "jdbc:mysql://localhost/Productosdb";
    private String usuario = "root";
    private String contraseña = "alumno";
    /**
     * Constructor for objects of class ModeloDB
     * Establece la conexion a la base de datos
     */
    public ModeloDB()
    {
        try {
      Class.forName("com.mysql.jdbc.Driver");
       } catch (ClassNotFoundException e) {
     System.err.println("ERROR AL REGISTRAR EL DRIVER");
     System.exit(0); // parar la ejecución
    }
    
    //establecer conexion
    try {
     conexion = DriverManager.getConnection(servidor, usuario, contraseña);
     stmt = conexion.createStatement();
    } catch (SQLException e) {
    System.err.println("ERROR AL CONECTAR CON EL SERVIDOR");
    System.exit(0); // PARA LA EJECUCIÓN DEL PROGRAMA
    }
    
    }

    // INSERT
    public boolean insertarProducto ( Producto p){
    String sentsql="Insert into 'productos'('codigo','stock','stock_min,'precio') values(?,?,?,?,?);";;
    PreparedStatement sentenciaprep=null;
    int numero_filas=0;
    
    try{
        sentenciaprep = conexion.prepareStatement(sentsql);
    }catch(SQLException e){
        System.err.println("Error en la instruccion sql");
        e.printStackTrace();
        return false;    
    }
    
    try{
          sentenciaprep.setInt   (1,p.getCodigo());
        sentenciaprep.setString(2,p.getNombre());
        sentenciaprep.setInt   (3,p.getStock());
        sentenciaprep.setInt   (4,p.getStock_min());
        sentenciaprep.setFloat (5,p.getPrecio());
        numero_filas = sentenciaprep.executeUpdate();
    }catch(Exception ex){
        ex.printStackTrace();
        return false;
    }
     return (numero_filas==1);
    }
    
    
    // DELETE
    boolean borrarProducto ( int codigo ){
      int num_filas=0;
      String sentsql ="delete from Productos where codigo ="+codigo;
      try{
          num_filas = stmt.executeUpdate(sentsql);
        }catch(Exception ex) {
            ex.printStackTrace();
        }
    return (num_filas==1);   
    }
    
    // SELECT
    public Producto buscarProducto ( int codigo){
      String sentsql ="select * from productos where codigo="+codigo;
      Producto p=null;
      
      try{
          ResultSet reset = stmt.executeQuery(sentsql);
          if(reset.next()){
              p= new Producto();
                p.setCodigo    (reset.getInt("codigo"));
                p.setNombre    (reset.getString("nombre"));
                p.setStock     (reset.getInt("stock"));
                p.setStock_min (reset.getInt("stock_min"));
                p.setPrecio    (reset.getFloat("precio"));
            }
        }catch(Exception ex){
            ex.printStackTrace();
            p=null;
        }
      return p;    
    }
    
    
    //SELECT
    void listarProductos (){
        String sqlStr = "select * from productos";
        try{
            ResultSet reset=stmt.executeQuery(sqlStr);
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }
    
    //UPDATE
    boolean modificarProducto (Producto nuevo){  
    String sqlStr = "UPDATE `Productos` SET CODIGO = ?, NOMBRE = ?, STOCK = ?, STOCK_MIN = ?, PRECIO = ? "+
                       " WHERE CODIGO = ?";
	PreparedStatement sentenciapreparada = null;
	int nfilas = 0;
 
	 // Creo una sentencia preparada
	 try {
	      sentenciapreparada = conexion.prepareStatement(sqlStr);
          } catch (SQLException e) {
	      System.err.println("ERROR en la instrucción de SQL");
	      e.printStackTrace();
	      return false;
          }
 
	try {
	    sentenciapreparada.setInt   (1,nuevo.getCodigo());
	    sentenciapreparada.setString(2,nuevo.getNombre());
	    sentenciapreparada.setInt   (3,nuevo.getStock());
	    sentenciapreparada.setInt   (4,nuevo.getStock_min());
	    sentenciapreparada.setFloat (5,nuevo.getPrecio());
	    sentenciapreparada.setInt   (6,nuevo.getCodigo()); 
	    nfilas = sentenciapreparada.executeUpdate();
	    } catch (Exception ex) {
	    ex.printStackTrace();
	    return false;
	}
        return (nfilas == 1);
    
    }
    
    // Devuelvo un Iterador de una ArrayList con los resultados
    // copiados del Rset al ArrayList
     Iterator <Producto> getIterator(){
       ArrayList <Producto> lista = new ArrayList<Producto>();
       // Relleno el array list con los resultados de al consulta
       String sqlStr = "select * from Productos ";
       try {
	    ResultSet rset = stmt.executeQuery(sqlStr);
            while ( rset.next ()){
                Producto m = new Producto();
                m.setCodigo    (rset.getInt   ("CODIGO"));
                m.setNombre    (rset.getString("NOMBRE"));
                m.setStock     (rset.getInt   ("STOCK"));
                m.setStock_min (rset.getInt   ("STOCK_MIN"));
                m.setPrecio    (rset.getFloat ("PRECIO"));
               lista.add(m); 
            }	
	} catch (Exception ex) {
	  ex.printStackTrace();
	}
       return lista.iterator();   
    }
   
}
